###################################################

Вынести класс карты как общий для всех проектов.
Обращаться к локалМап. Фулл мап - запретить для не Мап.
Поправить редактор карт. Добавить рабочего и иконку золота. Добавить считывание и запись версии
Использовать один класс Map для всех приложений юзающих карту!!!

Запилить классы ресурсов нормально! Запилить правильно ( "инкапсулировано" ) ресурсы на карте!
Проверить как ставится и изчезает меш ресурса ( да и остальные тоже )

KernelBase constructor с параметрами вместо Configure, чтобы не проверять выполнилась ли она.

Определить стандартные действия для ИИ: Move, Collect, Health, Attack, Repair

Проверить что быстрее выполняется: передача (х,у) по значению или по ссылке/указателю. Соотв. изменить &coord в параметрах функций.


-----Потом---------

Раскоментить все строчи из TTBuilder и проверить на венде для boost 1.46
Может radius (сбора, атаки) засунуть в ПоискПути? Добавить у Enti область постройки( чтобы здания др-на-др не наезжали )
Привести в порядок Логи!!!! подумать как будут выходить предупреждения о невозможности действия!
mDebugOverlay - заработать
перейти на c++ox и запилить обращение к map через at. Либо самому запилить это через find.
ObjectTitle - каваизировать!
Сохранять граф. ресурсы Огра для следующей игры.
precompiled headers для gcc ?

Скрыть все открытые методы, которые не будет юзать юзер, но юзаются внутри самой бибиотеки. 
(Tick, AssignTickFeature, ...) (например сделать friend класс....)

Поддвижок ИИ сделать как можно более "отдельным" чтобы можно было подцепить его к другому ядру.
Иметь в виду, что ИИ может быть осуществлён не только через С++. (Lua например) Т.е. продумать правильный интерфейс подключения ИИ.

Добавить операторы для игровых типов:
template<typename T>
std::ostream& operator<<(std::ostream& o, const TRect<T>& r)
{
	o << "TRect<>(l:" << r.left << ", t:" << r.top << ", r:" << r.right << ", b:" << r.bottom << ")";
	return o;
}